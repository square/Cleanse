/// DO NOT EDIT - This file was auto-generated by CleanseGen/main.swift
extension BindToable {

/// 1-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get()
    )
   })
}

/// 2-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get()
    )
   })
}

/// 3-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get()
    )
   })
}

/// 4-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get()
    )
   })
}

/// 5-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get()
    )
   })
}

/// 6-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get()
    )
   })
}

/// 7-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get()
    )
   })
}

/// 8-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get()
    )
   })
}

/// 9-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get()
    )
   })
}

/// 10-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get()
    )
   })
}

/// 11-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get()
    )
   })
}

/// 12-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get()
    )
   })
}

/// 13-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get()
    )
   })
}

/// 14-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get()
    )
   })
}

/// 15-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get()
    )
   })
}

/// 16-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get()
    )
   })
}

/// 17-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get()
    )
   })
}

/// 18-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get()
    )
   })
}

/// 19-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get()
    )
   })
}

/// 20-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get()
    )
   })
}

}
